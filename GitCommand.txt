- Tahapan git:
1. Working tree
2. Staging Area
3. History



- Working tree ini adalah file pekerjaan kita yang udah terkonek ke git repo



- Staging area sama History ada di folder .git



- process pada git:
1. Kita ngerjain project di working tree yang udah terasosiasi dengan git (udah ngelakuin git init)

2. nanti git memantau ada perubahan pada file2 kita yang di working tree atau gk

3. bisa dichecknya pake git status

4. kalo ada, bisa make git add untuk masukin file2 yang ada perubahan tadi ke staging area.

5  kalo udh oke sama perubahannya bisa pake git commit untuk menyimpan perubahan tadi + ngasih keteranganya



- git command list:

> git init : inisialisasi git

> git config : untuk ngasih identitas pada commit, sebaiknya disamakan dengan akun github atau gitlab
  o git config --global user.email "EputraP@gmail.com" : ngasih email
  o git config --global user.name "EputraP" :ngasih username
  o git config --list : ngasih tau isi konfigurasinya

> git status : memantau status file pada repo git, misal ada perubahan, ada file di staging, sekarang di branch apa

> git add : buat masukin ke staging area
  o git add . : ngeadd semua file yang ada perubahan
  o git add <nama file> : ngeadd spesifik file tertentu yang ada perubahan

> git commit : untuk masukin file yang ada di staging area ke history area
  o git commit -m "pesannya" : jadi pesannya ini bakal jadi commit di semua file yang ada di staging area
  o git commit -m "pesannya" <nama file> : pesannya ini bakal cuma ada di satu file aja

> git log : untuk ngasih history commit yang udah dilakukan ini untuk semua file
  o git log -<jumlah berapa history terkahir>
    cnth => git log -3 : bakal nampilin 3 perubahan commit terbaru
  o git log -- <nama file> : untuk nampilin history commit dari file tertentu

>git checkout <5 digit awal commit id> : untuk mengambalikan file di repo ke versi sebelumnya, milih versi yang mana bergantu 5 digit commitnya. nah liat commit id bisa lewat git log
  o git checkout <5 digit awal commit id> -- <nama file> : untuk mengembalikan ke versi sebelumnya terkhusus 1 file aja
  o git checkout <nama_branch> : untuk pindah branch

> git branch : ngelist branch yang aktif
  o git branch <nama_branch> : buat branch baru
  o git branch -d <nama_branch> : untuk delete branch (yang sudah di merged, kalo misal dipakai untuk yang blm di merged bakal muncul warning)
  o git branch -D <nama_branch> : untuk delete branch (yang belum di merged)
  o git branch --merged : untuk mengetahui branch yang sudah di merged
  o git log --all --decorate --oneline --graph : menampilkan visualisasi branch dalam bentuk graph (kayak insight network di github)

> git merge <nama_branch> : untuk ngemerge branch yang dipingin dengan branch master

> git clone <link_repo_github> : ngambil repo di remote ke server local

> git remote : untuk mengetahui origin
  o git remote -v : ngecek origin
  o git remote add origin <link_remote>: untuk nambahin origin remote
  o git remote add <nama_remote> <link_remote> : untuk nambahin remote baru
  
> git push : untuk push projek di semua branch ke remote
  o git push <nama_remote> <branch_name> : ngepush projek untuk branch tertentu
  o git push -u <nama_remote> <branch_name> : fungsinya biar pas ngepullnya, si git remote udah tau branch yang mau di pull 

> git pull : untuk update repo di local dari repo git

> git fetch : untuk ambil commit dari repo remote

> git rebase : untuk rebase

-------------------------- Branch and Head ---------------------------------------------------

- dalam sebuah hash message commit terdapat informasi username, email, timestamp


- setiap commit terhubung ke sebuah branch


- head = untuk mengetahui branch yang aktif


- ketika ada commit yang baru maka branch master dan head bakal pindah ke commit yang baru


- ketika pindah branch, maka bakal ada commit baru. nah head tadi sebagai penanda branch yang aktif bakal pindah ke branch yang kita tuju tadi

- flow cara pindah branch:
> bikin branch nya
> hbis itu git checkout
> terus mungkin lakukan perubahan di branch nya
> terus di commit pada branch itu

- jenis merge:
> fast forward 
  o terjadi ketika jalur yang ingin di merge berada pada direct path/jalur langsung
  o direct path disini maksudnya jalur cabangnya dari si branch itu langsung ke master
  o flow:
	- pindahin head atau branch aktinya ke master pakai checkout
	- terus pakai git merge <nama_branch> untuk ngemerge branch yang kita pengen ke branch master
	- lalu nanti master (branch aktif, ada headnya) bakal pindah ke branch yang kita merge ke master
	- pas udah pindah merge, branch yang kita merge dengan master masih aktif
	- jadi pas pindah itu, sekarang master (branch aktif) bakal pindah ke commit branch yang kita merge dengan master
  o jadi intinya mergenya ntar, si master (branch aktif) bakal pindah ke commit dari branch yang kita pengen merge dengan master

> three-way merge (merge commit)
  o terjadi ketika jalur yang ingin di merge, tidak berada pada satu jalur
  o jadi intinya ngemerge nya ntar, mbuat commit baru gabungan dua branch.


---------------------- .gitignore --------------------------------------------------
- fungsinya menghindari file2 yang tidak diinginkan ikut terbawa
- kalo mau tau file2 yang disarankan untuk gitIgnore coba buka gitignore.io

---------------------- git merge and rebase --------------------------------------------------
- kelemahan dari three way merge adalah commitnya bakal banyak banget, jadi idealnya kalo merge itu pakai fast forward merge
- kalo rebase itu, 
  > ketika master dan branch nya dalam bentuk pararel, maka merge yang bisa dilakukan cuma pakai three way merge
  > nah kalo kita pakai rebase cabang pararelnya bakal maju ke commit terakhir master, jadi yang sebelumnya paralel jadi seri dengan branchnya (fastforward)
